from aiogram import types, F
from aiogram.filters import Command
from loader import dp, user_sessions
from parser.itproger_parser import ITProgerParser
from keyboards.reply import get_main_keyboard
from keyboards.inline import get_articles_grid_keyboard

parser = ITProgerParser()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_sessions[user_id] = {'current_page': 1}

    welcome_text = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT Proger News Bot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ IT-–Ω–æ–≤–æ—Å—Ç—è–º–∏ —Å itproger.com\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )

    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

‚Ä¢ **üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏** - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏
‚Ä¢ **üîÑ –û–±–Ω–æ–≤–∏—Ç—å** - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
‚Ä¢ **‚ÑπÔ∏è –ü–æ–º–æ—â—å** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**
‚Ä¢ –°—Ç–∞—Ç—å–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏ 2x2
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ ‚û°Ô∏è" –∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
‚Ä¢ –í –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"!
    """

    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message(Command("latest"))
async def cmd_latest(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest"""
    await show_articles_grid(message, page=1)

@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def handle_latest_news(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'"""
    await show_articles_grid(message, page=1)

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
async def handle_refresh(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'"""
    user_id = message.from_user.id
    current_page = user_sessions.get(user_id, {}).get('current_page', 1)
    await show_articles_grid(message, page=current_page)

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await cmd_help(message)

@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!\n"
        "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ '‚ÑπÔ∏è –ü–æ–º–æ—â—å' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard()
    )

async def show_articles_grid(message: types.Message, page=1):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π –∫–∞–∫ –≤ –¥–∏–∑–∞–π–Ω–µ"""
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_sessions:
        user_sessions[user_id] = {}

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if 'total_pages' not in user_sessions[user_id]:
        total_pages = parser.get_total_pages()
        user_sessions[user_id]['total_pages'] = total_pages
        from loader import logger
        logger.info(f"Total pages for user {user_id}: {total_pages}")

    user_sessions[user_id]['current_page'] = page
    total_pages = user_sessions[user_id]['total_pages']

    # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å–∏
    articles = parser.parse_articles(page)

    if not articles:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    message_text = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∫–∞–∫ –≤ –¥–∏–∑–∞–π–Ω–µ
    for i, article in enumerate(articles[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å—Ç–∞—Ç—å—è–º–∏
        message_text += f"{i + 1}. {article['title']}\n"
        if article['description']:
            message_text += f"   {article['description']}\n"
        message_text += "\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await message.answer(
        message_text,
        reply_markup=get_articles_grid_keyboard(articles, page, total_pages)
    )