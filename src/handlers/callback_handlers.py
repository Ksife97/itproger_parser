from aiogram import types, F
from loader import dp, user_sessions, bot
from parser.itproger_parser import ITProgerParser
from keyboards.inline import get_articles_grid_keyboard, get_article_detail_keyboard

parser = ITProgerParser()

@dp.callback_query(F.data == "refresh")
async def handle_callback_refresh(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'"""
    user_id = callback.from_user.id
    current_page = user_sessions.get(user_id, {}).get('current_page', 1)
    await show_articles_grid(callback.message, page=current_page)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")

@dp.callback_query(F.data == "next_page")
async def handle_callback_next_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'"""
    user_id = callback.from_user.id
    current_page = user_sessions.get(user_id, {}).get('current_page', 1)
    total_pages = user_sessions.get(user_id, {}).get('total_pages', 84)

    if current_page < total_pages:
        await show_articles_grid(callback.message, page=current_page + 1)
    else:
        await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
    await callback.answer()

@dp.callback_query(F.data == "prev_page")
async def handle_callback_prev_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'"""
    user_id = callback.from_user.id
    current_page = user_sessions.get(user_id, {}).get('current_page', 1)
    if current_page > 1:
        await show_articles_grid(callback.message, page=current_page - 1)
    else:
        await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
    await callback.answer()

@dp.callback_query(F.data.startswith("article_"))
async def handle_callback_article(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—å–∏"""
    article_index = int(callback.data.split("_")[1])
    await show_article_detail(callback, article_index)
    await callback.answer()

@dp.callback_query(F.data == "full_content")
async def handle_full_content(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    await callback.answer("–°–∫–æ—Ä–æ!", show_alert=True)

async def show_articles_grid(message: types.Message, page=1):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π –∫–∞–∫ –≤ –¥–∏–∑–∞–π–Ω–µ"""
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_sessions:
        user_sessions[user_id] = {}

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if 'total_pages' not in user_sessions[user_id]:
        total_pages = parser.get_total_pages()
        user_sessions[user_id]['total_pages'] = total_pages
        from loader import logger
        logger.info(f"Total pages for user {user_id}: {total_pages}")

    user_sessions[user_id]['current_page'] = page
    total_pages = user_sessions[user_id]['total_pages']

    # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å–∏
    articles = parser.parse_articles(page)

    if not articles:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    message_text = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∫–∞–∫ –≤ –¥–∏–∑–∞–π–Ω–µ
    for i, article in enumerate(articles[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å—Ç–∞—Ç—å—è–º–∏
        message_text += f"{i + 1}. {article['title']}\n"
        if article['description']:
            message_text += f"   {article['description']}\n"
        message_text += "\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await message.answer(
        message_text,
        reply_markup=get_articles_grid_keyboard(articles, page, total_pages)
    )

async def show_article_detail(callback: types.CallbackQuery, article_index: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ"""
    user_id = callback.from_user.id
    current_page = user_sessions.get(user_id, {}).get('current_page', 1)
    articles = parser.parse_articles(current_page)

    if not articles or article_index >= len(articles):
        await callback.message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    article = articles[article_index]

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç—å–∏
    article_text = f"<b>{article['title']}</b>\n\n"

    if article['description']:
        article_text += f"{article['description']}\n\n"

    if article.get('meta'):
        article_text += f"üìä {article['meta']}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if article['image']:
        try:
            await callback.message.answer_photo(
                photo=article['image'],
                caption=article_text,
                reply_markup=get_article_detail_keyboard(
                    article_index,
                    len(articles),
                    article['link']
                )
            )
            return
        except Exception as e:
            from loader import logger
            logger.error(f"Error sending photo: {e}")

    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await callback.message.answer(
        article_text,
        reply_markup=get_article_detail_keyboard(
            article_index,
            len(articles),
            article['link']
        )
    )